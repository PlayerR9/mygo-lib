package slices

import (
	"slices"
	"testing"

	vc "github.com/PlayerR9/go-verify/common"
	test "github.com/PlayerR9/go-verify/test"
)

// TestApplyFilter tests the ApplyFilter function.
func TestApplyFilter(t *testing.T) {
	const (
		MAX int = 100
	)

	expected_evens := make([]int, 0, MAX/2)
	for i := 0; i < MAX; i += 2 {
		expected_evens = append(expected_evens, i)
	}

	nums := make([]int, 0, 100)
	for i := 0; i < MAX; i++ {
		nums = append(nums, i)
	}

	type args struct {
		elems     []int
		predicate Predicate[int]
		expected  []int
	}

	tests := test.NewTestSet(func(args args) test.TestingFn {
		return func() error {
			_ = Filter(&args.elems, args.predicate)

			ok := slices.Equal(args.elems, args.expected)
			if ok {
				return
			}

			vc.FAIL.WrongAny(t, args.expected, args.elems)
		}
	})

	_ = tests.Add("success", args{
		elems:     nums,
		predicate: func(x int) bool { return x%2 == 0 },
		expected:  expected_evens,
	})

	_ = tests.Add("no filter", args{
		elems:     nums,
		predicate: nil,
		expected:  nil,
	})

	_ = tests.Run(t)
}

// TestApplyReject tests the ApplyReject function.
func TestApplyReject(t *testing.T) {
	const (
		MAX int = 100
	)

	expected_odds := make([]int, 0, MAX/2)
	for i := 1; i < MAX; i += 2 {
		expected_odds = append(expected_odds, i)
	}

	nums := make([]int, 0, 100)
	for i := 0; i < MAX; i++ {
		nums = append(nums, i)
	}

	type args struct {
		elems     []int
		predicate Predicate[int]
		expected  []int
	}

	tests := test.NewTestSet(func(args args) test.TestingFn {
		return func() error {
			_ = Reject(&args.elems, args.predicate)

			ok := slices.Equal(args.elems, args.expected)
			if ok {
				return
			}

			vc.FAIL.WrongAny(t, args.expected, args.elems)
		}
	})

	_ = tests.Add("success", args{
		elems:     nums,
		predicate: func(x int) bool { return x%2 == 0 },
		expected:  expected_odds,
	})

	_ = tests.Add("no filter", args{
		elems:     nums,
		predicate: nil,
		expected:  nil,
	})

	_ = tests.Run(t)
}

// TestRejectNils tests the RejectNils function.
func TestRejectNils(t *testing.T) {
	type MockStruct struct {
	}

	type args struct {
		tokens   []*MockStruct
		expected []*MockStruct
	}

	tests := test.NewTestSet(func(args args) test.TestingFn {
		return func() error {
			_ = RejectNils(&args.tokens)

			ok := slices.Equal(args.tokens, args.expected)
			if ok {
				return
			}

			vc.FAIL.WrongAny(t, args.expected, args.tokens)
		}
	})

	_ = tests.Add("no elems", args{
		tokens:   []*MockStruct{},
		expected: []*MockStruct{},
	})

	_ = tests.Add("one elem", args{
		tokens:   []*MockStruct{{}},
		expected: []*MockStruct{{}},
	})

	_ = tests.Add("two elems", args{
		tokens:   []*MockStruct{nil, {}},
		expected: []*MockStruct{{}},
	})

	_ = tests.Add("all nil", args{
		tokens:   []*MockStruct{nil, nil},
		expected: nil,
	})

	_ = tests.Run(t)
}

// TestSplit tests the Split function.
func TestSplit(t *testing.T) {
	type args struct {
		elems     []int
		predicate Predicate[int]
		expected  uint
		success   []int
		fail      []int
	}

	tests := test.NewTestSet(func(args args) test.TestingFn {
		return func() error {
			bound := Split(args.elems, args.predicate)
			if bound != args.expected {
				vc.FAIL.WrongInt(t, int(args.expected), int(bound))
				return
			}

			ok := slices.Equal(args.elems[:bound], args.success)
			if !ok {
				vc.FAIL.WrongAny(t, args.success, args.elems[:bound])
				return
			}

			ok = slices.Equal(args.elems[bound:], args.fail)
			if !ok {
				vc.FAIL.WrongAny(t, args.fail, args.elems[bound:])
				return
			}
		}
	})

	_ = tests.Add("success", args{
		elems:     []int{1, 2, 3, 4, 5},
		predicate: func(x int) bool { return x%2 == 0 },
		expected:  2,
		success:   []int{2, 4},
		fail:      []int{1, 3, 5},
	})

	_ = tests.Run(t)
}
